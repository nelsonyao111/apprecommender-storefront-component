import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import Slider, { sliderSchemaForm, sliderSettingShape, sliderDefaultSettings } from '../../atoms/slider/Slider';
import { defaultTileProps } from '../../atoms/tile/Tile';
import { createNamespace } from '../../tools/namingTools';
import { ALPHABETICAL, RANDOM } from '../../constants/sorting';
import { DROPDOWN, INPUT } from '../../constants/schemaComponentTypes';
import './styles/ProductSimilarApps.scss';

import withListener from '../withListener';

const n = createNamespace('ProductSimilarApps');

const SORT_OPTION_LIST = [ALPHABETICAL, RANDOM];

export const sortList = (sortBy, list) => {
    if (sortBy && list && list.length) {
        const sortedList = [...list];

        switch (sortBy) {
            case ALPHABETICAL.value:
                return sortedList.sort((a, b) => {
                    if (a.name < b.name) { return -1; }
                    if (a.name > b.name) { return 1; }
                    return 0;
                });
            case RANDOM.value:
                sortedList.forEach((item, index) => {
                    const randomIndex = Math.floor(Math.random() * (index + 1));
                    [sortedList[index], sortedList[randomIndex]] = [sortedList[randomIndex], sortedList[index]];
                });

                return sortedList;
            default:
                return sortedList;
        }
    }

    return list;
};

export const ProductSimilarAppsComponent = ({
    data: {
        recommendations: {
            items,
            viewAllLink,
            i18n
        } = {}
    },
    settings
}) => {
    const [sortedItems, setSortedItems] = useState(null);

    const componentSettings = {
        ...ProductSimilarAppsComponent.defaultProps.settings,
        ...settings
    };
    const { sortBy } = componentSettings;

    useEffect(() => {
        const newSortedItems = sortList(sortBy, items);
        setSortedItems(newSortedItems);
    }, [sortBy, items]);

    if (!sortedItems || !sortedItems.length) {
        return null;
    }
    return (
        <div {...n('container').props}>
            <Slider
                items={sortedItems}
                url={viewAllLink}
                i18n={i18n}
                staticTitle={i18n.titleProduct}
                settings={settings}
            />
        </div>
    );
};

ProductSimilarAppsComponent.schema = () => ({
    name: 'ProductSimilarApps',
    title: 'uieditor.sfbComponent.productSimilarApps.title',
    form: {
        ...sliderSchemaForm,
        sliderTitle: {
            title: 'uieditor.sfbComponent.slider.sliderTitle.title',
            placeholder: 'uieditor.sfbComponent.slider.sliderTitle.placeholder',
            defaultValue: undefined,
            type: INPUT,
            required: false,
            validation: {
                pattern: /^$|(^[a-zA-Z0-9 ]+$)/,
                message: 'uieditor.sfbComponent.input.validation.message'
            }
        },
        sortBy: {
            title: 'uieditor.sfbComponent.productSimilarApps.sortBy.title',
            type: DROPDOWN,
            defaultValue: SORT_OPTION_LIST[0].value,
            options: SORT_OPTION_LIST,
            validation: {
                availableOptions: SORT_OPTION_LIST.map(({ value }) => value),
                message: 'uieditor.sfbComponent.dropdown.validation.message',
                default: 'uieditor.sfbComponent.dropdown.defaultValue'
            }
        }
    },
    marketplaceData: {
        recommendations: 'application.recommendations'
    },
    requiredDataFunc: ({ recommendations: { items = [] } }) => (items && items.length)
});

ProductSimilarAppsComponent.propTypes = {
    data: PropTypes.shape({
        recommendations: PropTypes.shape({
            items: PropTypes.arrayOf(defaultTileProps),
            viewAllLink: PropTypes.string,
            i18n: PropTypes.shape({
                title: PropTypes.string,
                titleProduct: PropTypes.string,
                viewAll: PropTypes.string
            })

        })
    }),
    settings: PropTypes.shape({
        ...sliderSettingShape,
        sortBy: PropTypes.string
    })
};

ProductSimilarAppsComponent.defaultProps = {
    data: {
        recommendations: {
            items: [],
            viewAllLink: '',
            i18n: {
                title: 'Similar Apps',
                titleProduct: 'Similar Products',
                viewAll: 'View All'
            }
        }
    },
    settings: {
        ...sliderDefaultSettings,
        sliderTitle: undefined,
        sortBy: null
    }
};

export default withListener(ProductSimilarAppsComponent);
